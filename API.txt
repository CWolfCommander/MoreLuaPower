/*
 *  More Lua Power, made by Golden Epsilon
 *  Tons of stuff added by Sunreal and Shenanigans
 *  PetBuff for MoreLuaPower by stephanreiken
 *  Workshop URL: https://steamcommunity.com/sharedfiles/filedetails/?id=2066319533
 *  GitHub Page: https://github.com/GoldenEpsilon/MoreLuaPower
 *
 *  Please do not include the DLL in your mods directly:
 *      Ask people to download the workshop version instead.
 *      
 *  That said, if there's something you want to modify from the code to make your own harmony mod, feel free!
 *  I am also open to help; If you have something you want to add in here, just let me know/add it in yourself! You will be credited.
*/

Welcome to the API! I'm going to try and organize this as much as possible, but there is only so much I can do.
    If you have suggestions to improve this, let me know! I'm [Golden Epsilon#8656] on discord.

I'm also going to have vanilla features in here as well, 
    so that if you know how modding works already you can relate what I modified, 
    and so if you don't know you can learn all the features at once.

Quick note: The features in here are in order of when they were added, so for new features scroll to the bottom of each category.
	
Table of Contents:
	[MISC FEATURES]
	[NEW MECHANICS]
	[LUA FUNCTIONS]
	[CALLED LUA FUNCTIONS]
	[GLOBAL LUA VARIABLES]
	[CUSTOM DATA TYPES]
	[CUSTOM FILE TYPES]
	[ACCESSIBLE TYPES]
	[ORGANIZATION]
	[PETS]

[MISC FEATURES]
	Subfolder Loading
		//Files inside folders inside mod folders will now be loaded as part of the mod.
		// There is an exception with folders named Disabled, for organization purposes,
		// but if the mod is named disabled the directory itself still loads anyway. (it won't load subdirectories, however)
		// NOTE: naming the folder disabled works with any capitalization.

	Custom Lua Effects
		//This is a recreation of https://steamcommunity.com/sharedfiles/filedetails/?id=2063268758, with a bit more flair
		// In the XML you can use the keyword Lua instead of something else like Frost, and it will call the function you specify
		// As an example, you could do <OnHit value="ExampleFunction">Lua</OnHit> and it would run the function ExampleFunction()

[NEW MECHANICS]	

	Program Advance    //NEEDS A REWRITE, DO NOT USE YET
		//Program advance is a mechanic from MMBN where you combine multiple chips into one powerful chip.
		//Spells with the ProgramAdvance param will be parsed otherwise, do a normal spell cast
		// ProgramAdvanceLinkWith is the name of the spell in the other slot needed to trigger the Advance Spell - use commas to separate spells
		// CostAdvancedMana is a boolean that determins if the Advance Spell drains mana
		// ConsumeAfterAdvance is a boolean that consumes the chip after the Advance Spell
		// AdvanceSpell is spell that ends up being casted
		//Example: <Params ProgramAdvance="true" ProgramAdvanceLinkWith="Thunder" CostAdvancedMana="false" ConsumeAfterAdvance="true" AdvanceSpell="StormThunder"></Params>
		//Example: <Params ProgramAdvance="true" ProgramAdvanceLinkWith="MiniThunder" CostAdvancedMana="false" ConsumeAfterAdvance="true" AdvanceSpell="StormThunder"></Params>
		//Example: <Params ProgramAdvance="true" ProgramAdvanceLinkWith="Frostbolt,IceNeedle" CostAdvancedMana="true" ConsumeAfterAdvance="false" AdvanceSpell="Tundra"></Params>
		//			NOTE: This last example activates on EITHER Frostbolt or IceNeedle

	Multicast
		//Multicast is a mechanic that allows you to make spells that dont discard after the first use!
		//Spells with the DontDiscard param will be parsed otherwise, do a normal spell cast
		//ShotsRemaining is a number that keeps track of how many casts you have left
		//MaxShots is self-explanatory
		//ManaCost is either "Start", "End", or "All", Defaulting to "All".
		//  If it is set to "Start" the mana cost will only be used the first cast,
		//  if it is set to "End" the mana cost will only be used the last cast,
		//  and if it is set to "All" the mana cost will be used for all casts.
		//Note: ManaCost does not affect anything if you don't have ShotsRemaining
		//Example: <Params DontDiscard="true" ShotsRemaining="5" MaxShots="5" ManaCost="Start"></Params>

	Kicker Cast
		//A kicker cast is a spell that behaves differently depending on how much mana the player has. Generally looks like this. Cast mini thunder for zero mana,
		//but if the player has 3 mana cast thunderstorm instead.
		//Example: <Params KickerCast="true" KickerManaCost="4" KickerSpell="StormThunder"></Params>
		//Kicker cast also supports multiple kickers
		//Examole: <Params KickerCast="true" KickerManaCost="1,4" KickerSpell="Thunder,StormThunder"></Params>

	Pet Additions
		//Go to the [PETS] section for more info.


[LUA FUNCTIONS]

MoreLuaPower:

	void MakeSprite			(string {path}, PATH, string {name})
		//Takes the path to the image you want to turn into a sprite
		// compared to your mod's base directory, the PATH global variable,
		// and a name for the sprite. Keep track of that name, because
		// that's how you use the |Sprite| later. More info in [custom data types].

	Sprite GetSprite		(|Sprite| {sprite})
		//Turns the string-based sprite into a unity sprite - 
		// I haven't had much luck messing with sprites directly in lua, however.
		// The main purpose of this function for now is that
		// it returns nil when the sprite asked for either doesn't exist
		// or hasn't loaded in yet.
	
	void NewEffect			(string {name}, |Sprite| {sprite} = "")
		//Creates a new |StatusEffect| named {name}, using {sprite} as the icon if given.

	void AddEffect			(Being {being}, |StatusEffect| {effect}, float {duration} = 0, float {amount} = 0)
		//Adds {effect} to {being}.
		// If {duration} is 0, the effect duration is infinite.
		// Keep in mind when using this for vanilla effects that they don't always allow arbitrary {amount}s:
		// As an example, Fragile cannot apply less than one stack.

	bool GetEffect			(Being {being}, |StatusEffect| {effect})
		//Checks to see if {being} has {effect}, and returns true or false.
		// If the effect does not exist, returns false and logs that the effect does not exist in the chat.

	float GetEffectAmount		(Being {being}, |StatusEffect| {effect})
		//Checks to see if {being} has {effect}, and returns the amount of the effect if so.
		// If the effect does not exist, returns 0 and logs that the effect does not exist in the chat.

	void RemoveEffect		(Being {being}, |StatusEffect| {effect})
		//Removes {effect} from {being}

	bool EffectExists		(string {effect})
		//Checks to see if {effect} exists.
		// In other words, it checks if NewEffect has been run for {effect}
		
	Brand MakeBrand			(string {name}, string {description} = null)
		//Adds a brand called {name} to the game.
		// MUST be called in either Init or from outside of any functions,
		// because to work this must run the first frame that lua files are loaded.
		// description is optional, but recommended.
		// The recommendation for creating a brand is to use a variation of this in Init:

		// MakeSprite("ExampleSprite.png", PATH, "ExampleSprite");
		// MakeBrand("ExampleBrand");
		// while(GetSprite("ExampleSprite") == nil) do
		// 	WaitForFrames(1);
		// end
		// SetBrandImage("ExampleBrand", "ExampleSprite");
		
	Brand GetBrand			(Brand {brand})
		//Returns the name of {brand} as a string

	void SetBrandImage		(string {name}, string {sprite}, string {BGSprite} = null)
		//Sets the image(s) of the Brand named {name}.
		// Must be called after all sprites to be used in the function are loaded.
		// The recommendation for creating a brand is to use a variation of this in Init:

		// MakeSprite("ExampleSprite.png", PATH, "ExampleSprite");
		// MakeBrand("ExampleBrand");
		// while(GetSprite("ExampleSprite") == nil) do
		// 	WaitForFrames(1);
		// end
		// SetBrandImage("ExampleBrand", "ExampleSprite");

	void ParticleEffect		(Being {being}, |ParticleSystem| {system})
		//Creates and runs a particle effect attached to the Being you pass.
		// More info on |ParticleSystem| is in [custom data types].

	void PlayCustomSound			(Being {being}, |Sound| {sound})
		//Plays the sound specified.
		// If the sound does not exist, it logs that the effect does not exist in the chat.

	void PlayCustomMusic	(|Music| {music})
		//plays the specified sound as music. 
		// What you put here is the same string as you put in for {AudioName} for MakeCustomMusic.
		// Recommended for stuff like bosses

	void PlayCustomMusicIntroLoop	(|Music| {music}, float {IntroBoundry}, float {EndBoundry})
		//plays the specified sound as music with looping. 
		// What you put here is the same string as you put in for {AudioName} for MakeCustomMusic.
		// You'd have to check with Sunreal, but I believe the music goes back to IntroBoundry whenever it reaches EndBoundry

	void SetVariable		(Being {being}, string {variableName}, string {variable})
		//Sets the Custom Variable {variableName} to {variable} for {being}, adding it if it doesn't exist.

	string GetVariable		(Being {being}, string {variableName})
		//Gets the Custom Variable {variableName} from {being}, returning "Variable Not Set" if it doesn't exist.

	void AddHook			(FTrigger {trigger}, string {functionName}, being {attachedBeing} = null)
		//Adds the function {functionName} as a hook, which means that it will be activated every time {trigger} is activated
		// You can attach it to any being, by default it'll attach to a player.

	void AddLangTerm		(string {termName}, string {translation}, string {language} = "English")
		//Adds a term to the language dictionary, optionally letting you choose a language other than english.
		// Mainly used behind the scenes for adding brands right now, but also works for changing whatever 
		// text you want if you look into the code.

	bool GetCustomInput		(KeyCode {code})
		//Checks whether the key {code} is pressed

	bool EnableDeveloperTools()
		//Turns on the dev console, returning whether it just opened or closed
		// As of right now this function is redundant because you can press ` to open the console when MoreLuaPower is loaded
		
	Player GetPlayer		()
		//Simply returns the current player.
		// Meant to be used in Update, GameUpdate, and other similar functions.

	void PrintDev			(string {str})
		//Prints a message to the dev console

	void RunDev				(string {str})
		//Runs a command from the dev console
	
	void AddCustomMusic		(string {AudioName}, float {volume} = 1, float {startTime} = 0)
		//Adds the file specified by {AudioName} as |Music| that you can call with other functions.

	void AddMusicHook		(|Music| {music}, string {zoneBgName}, string {type})
		//Sets the zone's music to {music}
		// The valid inputs for {type} are "Idle" and "Battle", both self-explanatory.
		// {music} is the same string as you put in for {AudioName} for MakeCustomMusic.

	void AddZoneIcon		(|Sprite| {spriteName}, string {dotName})
		//Sets the zone {dotName}'s icon to {spriteName}, I believe (you use the name in zones.xml)
		// ...ask @Sunreal#3392 for clarification if you need it.

	void AddUpgrade			(string {name}, string {abbreviation}, string {description}, |Function| {check}, |Function| {effect})
		//Adds the upgrade to the game, using the inputs to help - |Function| is a string with the name of the function. Use something unique.
		// {name} needs to be unique - I don't believe it shows up anywhere, so you could prepend your mod name or something
		// {abbreviation} is typically a single letter; OSFE takes up a lot of the options, though, so if you need to feel free to change it up a bit with two letters or something.
		// {description} gets automatically surrounded by parentheses, so you don't need to do that manually. Length should be as short as you can.
		// {check} is a function that takes a SpellObject as an input and returns a boolean, and it's used to see if the upgrade can be applied to the spell. 
		//		If it fails this check, your upgrade will not show up.
		// {effect} is also a function that takes a SpellObject as an input and returns the same SpellObject as an output.
		//		This is where you actually add your modifications.
		//		You should be able to use it to run custom code when it's cast, if you can't figure it out ping me and I can work it out with you.

	void AddDropCheck		(string {name}, |Function| {check})
		//Adds a drop check for the given item - for example, you could make the CustomFoo artifact only drop when you have the CustomBar spell on you.
		// {name} is the name of the item to add the check to
		// {check} is the function that you want to use (it needs to return true or false, false to have the item not show up)

	void AddXMLToSpell(SpellObject <spellObj>, string <XML>)
		//Adds a line of XML to the SpellObject
		// Meant to be used for upgrading spells
		// Does not need tags like <Spells> or <Spell>, just put the tags that you would want in the spell directly like <OnHit>Flame</OnHit>

	void MakeZoneGenocideLenient(string <zoneName>)
		//Makes the zone not matter for the game's route (pacifist, neutral, genocide)
		// Meant for custom bosses as sparing has not been fully figured out yet

	void Log(string <message>, LogLevel <logLevel>)
		//Writes <message> to the debug log and/or the console, depending on <logLevel>.
		// Meant to be a flexible replacement for print() that prints to the console as well

	void ChangeFileLogLevel(LogLevel <logLevel>)
		//Sets what logs get written to the debug log (<logLevel> or higher)
		// Great for debugging errors that aren't obviously failing
		
	void ChangeConsoleLogLevel(LogLevel <logLevel>)
		//Sets what logs get written to the console (<logLevel> or higher)
		// Great for debugging errors that aren't obviously failing
		
	void AddTriggerTooltip(FTrigger <trigger>, string <name>, string <tooltip>)
		//Adds a tooltip for the given FTrigger for hovering over spells/artifacts.
		// <name> should be the name to be used in the popup, <tooltip> is the description.
		
	void AddEffectTooltip(Effect <effect>, string <name>, string <tooltip>)
		//Adds a tooltip for the given Effect for hovering over spells/artifacts.
		// <name> should be the name to be used in the popup, <tooltip> is the description.


Lua-based:

	PetBuffArtifactFunction(item, target, status, amount, duration, extra)		
		// Item needs to be a reference to the item that triggered this effect. 
		// Look at the [PETS] section for more info

	PetBuffArtifactPetIDFunction(item, petid, status, amount, duration, extra) 	
		// Targeting by PetID runs this function instead
		// Look at the [PETS] section for more info

[CALLED LUA FUNCTIONS]
//note: these do not come with an object as an input, you will want to use S.I.whatever to access objects.

	Init:
	//When put into a file will be called only once.
	// This is for loading sprites and such.

	Awake:
	//When put into a file will be called whenever the game loads/reloads lua mods.
	// This is for setting global variables and such.

	Update:
	//Is called every frame, including on menus and when time's stopped.

	GameUpdate:
	//Is called every physics update, does not run on certain menus intentionally like the main menu and the game over menu. Meant for updating during gameplay.

[GLOBAL LUA VARIABLES]

MoreLuaPower:
    Check:				Check
    Shape:				Shape
    Location:			Location
    ArcType:			ArcType
    Time:				Time			//I HAVEN'T CHECKED IF THIS WORKS YET
    TimeScale:			Time.timeScale
    DeltaTime:			Time.deltaTime
	PATH:				the path to your mod's directory

Vanilla:
	State:				State
	Status:				Status
	FireLoop:			FireLoop
	FTrigger:			FTrigger
	Direction:			Direction
	ItemType:			ItemType
	Target:				Target
	Block:				Block
	GunPointSetting:	GunPointSetting
	BC:					BC


[CUSTOM DATA TYPES]	
//note: these are not actual data types, I just name it that because you need to treat them in special ways. 
// Custom data types are differentiated in the API by ||, so for example there are |Sprite|s and |Status|es

	|Sprite|
		//You need to load these manually using MakeSprite, and then you use them by passing a string that is the same as the name.
		//NOTE: You MUST leave at least a few frames between MakeSprite and using the new sprite. 
		//		I personally recommend running all of your MakeSprites in Init.lua (don't put your code in a function, and it runs on mod load)

	|Sound|
		//These are loaded automatically just by being in your mod folder, you pass them in by using a string that is the same as its name.
		//Also works with mp3 files.

	|StatusEffect|
		//You create this by running NewEffect, and check to see if it exists with EffectExists. Pass it in with a string of the name.
		//Also works with vanilla effects, so you can pass in "Shield" to AddEffect to give the Being shields.

	|Material|
		//As of right now this is only used internally for particle systems.

	|ParticleSystem|
		//This is just a table that looks for specific parameters and values.
		//USED IN:
		//	
		//The values shown here are the default values, 
		//if your ParticleSystem table doesn't have a certain parameter it defaults to these.
        { sprite = "Normal" },				//sprite name from MakeSprite
        { xOff = "0" },
        { yOff = "0" },
        { zOff = "0" },
        { loop = "false" },					//true, True, TRUE, 1, false, False, FALSE, 0
        { duration = "0.15" },
        { startDelay = "0" },
        { sstartLifetime = "0.5" },
        { startSpeed = "500" },
        { startSize = "2" },
        { startSizeMin = "-1" },			//These overwrite startSize when both are a positive number
        { startSizeMax = "-1" },			//This is the same as changing size over time.
        { startRotation = "0" },			//Degrees
        { startColor = "#FFF" },			//hex color (you can also pass alpha in the hex color)
        { startColorMin = "" },				//These overwrite startColor when both are a valid color.
        { startColorMax = "" },				//This is the same as changing color over time.
        { gravityModifier = "0" },
        { simulationSpace = "Local" },		//Local, Global
        { emissionRate = "10" },
        { burstCount = "1" },				//Integers only
        { shape = "Sphere" },				//Sphere, Hemisphere, Cone, Donut, Box, Circle, Edge, Rectangle //TODO


[CUSTOM FILE TYPES]

MoreLuaPower lets you add custom file loading to your mod. 
Adding a CustomFileTypes.xml to your mod will allow it to handle any file under the specification you give. 
The loading of MP3 files is done using this functionality. Use that as a template.
Ask in the modding discord for help on this one. @Shenanigans specifically.

//Also loads subfolders of mods after all mods' main folders are loaded.


[ACCESSIBLE TYPES]

MoreLuaPower:
	Rewired.Player							//This is used for checking button presses
	S
    Run
    SpellListCard
	ListCard
    StatusEffect
    HeroSelectCtrl
    AnimatorOverrideController
    Sprite
    Check
	Shape
	Location
	ArcType
	KeyCode
	ItemObject
	AnimationOverrider

Vanilla:
    Transform
	Cardtridge
	Vector3>
	List<Being>
	List<Cpu>
	Animator
	Quaternion
	Rigidbody2D
	BoxCollider2D
	Time
	State
	Status
	Direction
	FTrigger
	ItemType
	GunPointSetting
	TalkBox
	RunCtrl
	DuelDisk
	EffectApp
	Target
	StatusApp
	AmountApp
	DeckScreen
	HeroProfile
	FireLoop
	Player
	List<Tile>
	List<TileApp>
	List<SpellObject>
	List<string>
	ShopCtrl
	Block
	BattleGrid
	CastSlot
	SpellObject
	ArtifactObject
	Spell
	Artifact
	Tile
	Projectile
	ProjectileFactory
	Moveable
	BeingObject
	Enemy
	Structure
	BC
	DeckCtrl
	PostCtrl
	ItemManager
	TileApp
	Health
	StatsScreen
	TI
	Being


[ORGANIZATION]
	//note: this section is for looking through the c# source code.
	//NOTE: this hasn't been updated in a while. Everything should still be accurate, there is just more than is mentioned here.

	CustomData.cs
		LuaPowerData
			|Sprite|			(sprites)
			|StatusEffect|		(statuses)
			|Material|			(materials)
			|ParticleSystem|	(DPS)

	CustomParticles.cs
		LuaPowerParticles
			void ParticleEffect(Being being, Dictionary<string, string> system)

	CustomSound.cs
		MoreLuaPower_SoundLoader
			Patch of ModCtrl._InstallTheseMods
				void Prefix(ref ModCtrl __instance, FileInfo[] fileInfo, string modsDir)
					//loads all sounds from the directory. Calls PowerMonoBehavior.LoadSound()
					//Adds PowerMonoBehavior to S.I's GameObject if it is not there already
		LuaPowerSound
			void PlayCustomSound(Being being, string sound)

	CustomSprites.cs
		LuaPowerSprites
			void MakeSprite(string image, string PATH, string name)
				//loads the sound that is requested. Calls PowerMonoBehavior.LoadSprite()
				//Adds PowerMonoBehavior to S.I's GameObject if it is not there already

	CustomStatusEffects.cs
		MoreLuaPower_CustomStatusTranspiler
			Transpiler for StatusEffect.Set
				Explanation is in file
		MoreLuaPower_CustomStatusEffects
			Patch of StatusEffect.Set
				void Postfix(Being being, Status statusType, StatusEffect __instance, Image ___icon, Image ___iconBackground)
		LuaPowerStatus
			void Setup()
				//adds vanilla status effects to the list of status effects
			void NewEffect(string effect, string sprite)
			bool EffectExists(string effect)
			void AddEffect(Being being, string effect, float duration = 0, float amount = 0)
			bool GetEffect(Being being, string effect)
			float GetEffectAmount(Being being, string effect)
			void RemoveEffect(Being being, string effect)

	GlobalLuaFunctions.cs
		MoreLuaPower_GlobalLuaFunctions
			Patch of new EffectActions(string)
				void Postfix()
					//adds all of the global lua functions

	GlobalLuaTypes.cs
		MoreLuaPower_GlobalLuaTypes
			Patch of new EffectActions(string)
				void Postfix()
					//adds all of the global lua types

	GlobalLuaVariables.cs
		MoreLuaPower_GlobalLuaTypes
			Patch of new EffectActions(string)
				void Postfix()
					//adds all of the global lua variables except for PATH
		MoreLuaPower_PATHVariable
			Patch of EffectActions.AddScript
				void Prefix(string scriptPath, Script ___myLuaScript)
					//adds the PATH global variable

	MoreLuaPower.cs
		MoreLuaPower
			Patch of new EffectActions(string)
				void Postfix()
					//calls LuaPowerStatus.Setup()
		PowerHelpers
			//any in-development features that don't have their own file yet can go here

	PowerMonoBehavior.cs
		PowerMonoBehavior
			IEnumerator LoadSprite(string url, Action<Texture2D> response)
			IEnumerator LoadSound(FileInfo file, AudioType audioType, Action<AudioClip> response)

	ProgramAdvance.cs
		MoreLuaPower_ProgramAdvance
			Patch of Player.CastSpell
				bool Prefix(ref Player __instance, int slotNum, ref int manaOverride, bool consumeOverride)
				//adds the ProgramAdvance mechanic
	Multicast.cs
		MoreLuaPower_Multicast
			Patch of Player.CastSpell
				bool Prefix(ref Player __instance, int slotNum, ref int manaOverride, bool consumeOverride)
				//adds the Multicast mechanic
[PETS]
	PetBuff for MoreLuaPower by stephanreiken

	If you want your spell to buff pets, add this Action to your spell.
	<Action>PetBuffSpell</Action>

	Add these Paramaters to the spell in order to control what PetBuffSpell does.

	PetBuffInBattleOnly="false" //Only include this if you set it to false, False, or FALSE as true is the default behavior. Generally don't change this as it would allow you to add buffs, shields, or healing to your pets outside of combat.

	PetBuffTarget= 	// Choose which pets you want to affect. 
	"OnlyMyPets"    // If Player 1 casts the spell, it won't affect the pets Player 2 has. Enemies can also cast it and it will only affect their pets.
	"AllPlayerPets"	// This will buff pets of both players.
	"TargetsPets" 	// TargetsPets will affect the pets of all beings set as target, use this if you want to buff the pets of something On Hit.
	"AllEnemyPets" 	// Enemies generally do not have pets and should not be used without mods that give enemies pets.
	"NamedPetID"	// All Pets with a matching BeingID will be affected.

	PetID1="PetDragon"	//You can add as many PetIDs as you want to check.
	PetID2="PetKitty"	//Keep in mind if you have 2 Pet Kitty on the field, both will be affected
	PetID3="PetFox"		//This will also target Enemy Pets which have the ID, not just Player Pets.
	...
	PetID100="PetCustom"

	PetBuffStatus1=
	"Heal"   	// Several effects including Heal are also on the list. Heals the target.
	"DamageNorm" 	// Deals Damage not ignoring defense.
	"Damage" 	// Deals Damage ignoring defense.
	"DamageTrue" 	// Deals Damage ignoring defense and shields.
	"Invincibility" // Add invincibility.
	"CastSpell" 	// Forces the pet to cast a spell. The SpellID is PetBuffExtra1/2/3 etc.
	"Defense" 	// Any string that exists in the Status Enum will work. However, an invalid entry will break your spell.
	etc... 
	PetBuffStatus2="SpellPower"
	PetBuffStatus3="Flow"     	// You can set as many different status as you want. Identical entries will work but would be redundent.
	...		     	// It will not check PetBuffStatus5 if PetBuffStatus4 doesn't exist etc.
	PetBuffStatus100="Trinity"

	PetBuffAmount1="1"
	PetBuffAmount2="7"    	// If you do not set an amount it usually doesn't do anything.
	PetBuffAmount3="11"	
	....
	PetBuffAmount100="6"


	PetBuffDuration1="1"	// You do not need a duration for Heal. Durations are floats.
	PetBuffDuration2="0.1"  // Some buffs require a duration in order to have an effect but can be left out for those that do not. For example, Fragile does not need a duration and will ignore a duration but SpellPower requires a duration.
	PetBuffDuration3="10"	// If you leave out the duration for a status that requires it, the duration will be 9999 seconds.
	...
	PetBuffDuration100="2.3"

	PetBuffExtra1="None"	  // Extra is a field for only two things right now and is normally "None" and can be skipped
	PetBuffExtra2="StepSlash" // CastSpell requires Extra have a SpellID in it
	PetBuffExtra3="Cleanse"   // Cleanse when paired with a status effect will remove the status instead.
	...
	PetBuffExtra1="None"


	If you want to run this same system on an Artifact trigger, you'll need to write your own lua faction and run it by the artifact, and have that function run one of these function. 	//You can also run PetBuffSpell with an artifact but you'll need to set the correct Params in the artifact and you won't be able to change the effect between different Apps.

	PetBuffArtifactFunction(item, target, status, amount, duration, extra)		// Item needs to be a reference to the item that triggered this effect. 
	PetBuffArtifactPetIDFunction(item, petid, status, amount, duration, extra) 	// Targeting by PetID runs this function instead


	Examples
	-Give all pets 10 Defense for 10 seconds and all Pet Foxes 10 spellpower for 10 seconds triggered by an artifact-
	function MyPetBuffArtifact(item)
		PetBuffArtifactFunction(item, "OnlyMyPets", "Defense", 10, 10, "None")
		PetBuffArtifactPetIDFunction(item, "PetFox", "SpellPower", 10, 10, "None") 
	end
	-Make PetDragons cast Ring Of Fire when cast-
	<Params PetBuffTarget="NamedPetID" PetID1="PetDragon" PetBuffStatus1="CastSpell" PetBuffAmount1="0" PetBuffExtra1="RingOfFire"></Params>

	-Deal 10 damage and add 10 fragile to Enemy Pets-
	<Params PetBuffTarget="AllEnemyPets" PetBuffStatus1="Damage" PetBuffAmount1="10" PetBuffExtra1="Cleanse" PetBuffDuration1="10" PetBuffStatus2="Fragile" PetBuffAmount2="10"></Params>

	-Add 10 Spellpower for 10 seconds to the Caster's pets-
	<Params PetBuffTarget="OnlyMyPets" PetBuffStatus1="SpellPower" PetBuffAmount1="10" PetBuffDuration1="10"></Params>

	-Heal all Players' Pets by 10-
	<Params PetBuffTarget="AllPlayerPets" PetBuffStatus1="Heal" PetBuffAmount1="10"></Params>

	-Remove Frost, Fragile, and Poison from all Players' Pets-
	<Params PetBuffTarget="AllPlayerPets" PetBuffStatus1="Fragile" PetBuffExtra1="Cleanse" PetBuffStatus2="Frost" PetBuffExtra1="Cleanse" PetBuffStatus3="Poison" PetBuffExtra1="Cleanse"></Params>
